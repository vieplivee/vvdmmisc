devtools::load_all()
devtools::load_all(".")
devtools::load_all(".")
library(devtools)
install.packages("devtools")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
install.packages("formatR")
formatR::tidy_dir("R")
install.packages("lintr")
lintr::lint_package()
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::document()
formatR::tidy_dir("R")
devtools::document()
library(vvdmmisc)
library(vvdmmisc)
devtools::load_all(".")
devtools::document()
install.packages("formatR")
formatR::tidy_dir("R")
devtools::document()
?data.frame
(d <- data.frame(x = 1, y = 1:10, fac = fac))
(d <- data.frame(x = 1, y = 1:10, fac = sample(L3, 10, replace = TRUE)))
(d <- data.frame(x = 1, y = 1:10, fac = sample(LETTERS[1:3], 10, replace = TRUE)))
?rep
d <- data.frame(x = 2:11, y = 1:10)
d
plotcormatrix(d)
dataframe <- d
dataframe <- dataframe[sapply(dataframe, is.numeric)]
sdall <- sapply(dataframe, sd)
sdall <- sdall[sdall == 0]
dataframe <- dataframe[, -which(names(dataframe) %in% names(sdall))]
dataframe <- d
sdall <- sapply(dataframe, sd)
sdall
sdall <- sdall[sdall == 0]
sdall
dataframe <- dataframe[, -which(names(dataframe) %in% names(sdall))]
dataframe <- d
dataframe <- dataframe[sapply(dataframe, is.numeric)]
sdall <- sapply(dataframe, sd)
sdall <- sdall[sdall == 0]
sdall
names(sdall)
names(dataframe)
which(names(dataframe) %in% names(sdall))
a <- which(names(dataframe) %in% names(sdall))
a
dataframe[, -a]
length(sdall)
#' plot correlation matrix
#'
#' @param dataframe
#' @param roundn (optional) - an integer number of decimal places to round
#'   correlation coefficients, default = 2
#' @param type (optional) - 'lower' (default) for lower triangular matrix,
#'   'upper' for upper triangular matrix, and 'full' for full matrix
#' @param corfix (optiona) - 'FALSE' (default) for natural output, 'TRUE' for
#'   square output
#' @return a plot of correlation matrix
#'
#' @examples
plotcormatrix <- function(dataframe, roundn = 2, type = "lower", corfix = FALSE) {
###### packages ######
if (!require(ggplot2)) {
install.packages(ggplot2)
}
require(ggplot2)
if (!require(reshape2)) {
install.packages(reshape2)
}
require(reshape2)
###### side functions ######
get_lower_tri <- function(cormat) {
cormat[upper.tri(cormat, diag = TRUE)] <- NA
return(cormat)
}
get_upper_tri <- function(cormat) {
cormat[lower.tri(cormat, diag = TRUE)] <- NA
return(cormat)
}
###### main ######
dataframe <- dataframe[sapply(dataframe, is.numeric)]
sdall <- sapply(dataframe, sd)
sdall <- sdall[sdall == 0]
if (length(sdall) > 0) {
dataframe <- dataframe[, -which(names(dataframe) %in% names(sdall))]
}
cor.dataframe <- round(cor(dataframe), roundn)
if (type == "upper") {
cor.dataframe <- get_upper_tri(cor.dataframe)
} else if (type == "full") {
cor.dataframe <- cor.dataframe
} else {
cor.dataframe <- get_lower_tri(cor.dataframe)
}
for (i in 1:nrow(cor.dataframe)) {
cor.dataframe[i, i] = NaN
}
p <- ggplot(dataframe = melt(cor.dataframe), aes(x = Var1, y = Var2, fill = value)) + geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "green", mid = "white", midpoint = 0, limit = c(-1, 1), name = "Pearson\nCorrelation") +
theme_minimal() + theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1))
if (corfix == TRUE) {
p <- p + coord_fixed()
}
return(p)
}
d <- data.frame(x = 2:11, y = 1:10)
plotcormatrix(d)
dataframe <- d
dataframe <- dataframe[sapply(dataframe, is.numeric)]
cor.dataframe <- round(cor(dataframe), roundn)
cor.dataframe <- round(cor(dataframe), 2)
for (i in 1:nrow(cor.dataframe)) {
cor.dataframe[i, i] = NaN
}
dataframe <- d
cor.dataframe <- round(cor(dataframe), 2)
cor.dataframe
for (i in 1:nrow(cor.dataframe)) {
cor.dataframe[i, i] = NaN
}
cor.dataframe
p <- ggplot(dataframe = melt(cor.dataframe), aes(x = Var1, y = Var2, fill = value)) + geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "green", mid = "white", midpoint = 0, limit = c(-1, 1), name = "Pearson\nCorrelation") +
theme_minimal() + theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1))
ggplot(dataframe = melt(cor.dataframe),
aes(x = Var1, y = Var2, fill = value))
melt(cor.dataframe)
ggplot(data = melt(cor.dataframe),
aes(x = Var1, y = Var2, fill = value))
length(dataframe)
d <- data.frame(x = 2:11, y = 1:10, z=3:12)
dataframe <- d
cor.dataframe <- round(cor(dataframe), 2)
for (i in 1:nrow(cor.dataframe)) {
cor.dataframe[i, i] = NaN
}
ggplot(data = melt(cor.dataframe),
aes(x = Var1, y = Var2, fill = value))
ggplot(data = melt(cor.dataframe),
aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "green", mid = "white", midpoint = 0, limit = c(-1, 1), name = "Pearson\nCorrelation") +
theme_minimal() + theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1))
devtools::document()
plotcormatrix <- function(dataframe, roundn = 2, type = "lower", corfix = FALSE) {
###### packages ######
if (!require(ggplot2)) {
install.packages(ggplot2)
}
require(ggplot2)
if (!require(reshape2)) {
install.packages(reshape2)
}
require(reshape2)
###### side functions ######
get_lower_tri <- function(cormat) {
cormat[upper.tri(cormat, diag = TRUE)] <- NA
return(cormat)
}
get_upper_tri <- function(cormat) {
cormat[lower.tri(cormat, diag = TRUE)] <- NA
return(cormat)
}
###### main ######
dataframe <- dataframe[sapply(dataframe, is.numeric)]
sdall <- sapply(dataframe, sd)
sdall <- sdall[sdall == 0]
if (length(sdall) > 0) {
dataframe <- dataframe[, -which(names(dataframe) %in% names(sdall))]
}
if (length(dataframe) <= 2) {
stop("Need at least 3 valid columns in the dataframe to proceed. Check length(dataframe)!")
}
cordata <- round(cor(dataframe), roundn)
if (type == "upper") {
cordata <- get_upper_tri(cordata)
} else if (type == "full") {
cordata <- cordata
} else {
cordata <- get_lower_tri(cordata)
}
for (i in 1:nrow(cordata)) {
cordata[i, i] = NaN
}
p <- ggplot(
data = melt(cordata),
aes(x = Var1, y = Var2, fill = value)
) +
geom_tile(color = "white") +
scale_fill_gradient2(
low = "red",
high = "green",
mid = "white",
midpoint = 0,
limit = c(-1, 1),
name = "Pearson\nCorrelation"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1))
if (corfix == TRUE) {
p <- p + coord_fixed()
}
return(p)
}
d <- data.frame(x = 2:11, y = 1:10, z=3:12)
plotcormatrix(d)
devtools::document()
d <- data.frame(x = 2:11, y = 1:10, z=3:12)
plotcormatrix(d)
d <- data.frame(x = 2:11, y = 1:10)
plotcormatrix(d)
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::use_testthat()
devtools::document()
devtools::document()
devtools::document()
library(vvdmmisc)
devtools::document()
library(vvdmmisc)
?split.data.frame
?plotcormatrix
library(vvdmmisc)
library(vvdmmisc)
?splitdf
?removefactors
?removefactors
?plotcormatrix
devtools::document()
library(vvdmmisc)
library(vvdmmisc)
?plotcormatrix
expandlevels <- function(dataframe, factorcols) {
if (length(factorcols) == 0) {
factorcols <- names(which(sapply(dataframe, is.factor)))
}
for (name in factorcols){
for (level in levels(dataframe[[name]])){
dataframe[[paste(name, level, sep='-')]] <- as.factor(
ifelse(dataframe[[name]] == level, 1, 0))
}
dataframe <- dataframe[, -which(names(dataframe) %in% c(name))]
}
return(dataframe)
}
devtools::document()
library(vvdmmisc)
